

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.net.MalformedURLException;
import java.rmi.*;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author wangya
 */
public final class ClientWindow extends javax.swing.JFrame {

    IRMIInterface rmiInterface;
    
    float totalAmount = 0;
    
    /**
     * Creates new form ClientWindow
     * @throws java.rmi.NotBoundException
     * @throws java.net.MalformedURLException
     * @throws java.rmi.RemoteException
     */
    public ClientWindow() throws NotBoundException, MalformedURLException, RemoteException {
        
        // Initilize the RMI client and try to connect the server
        rmiInterface = (IRMIInterface)Naming.lookup("//localhost/RmiServer");
        initComponents();
        
        if(rmiInterface != null){
            initControllers();
        }
    }
    
    /**
     * @throws RemoteException 
     */
    public void initControllers() throws RemoteException {
        
        // Load all products from the server
        this.comboUPC.removeAllItems();
        int size = rmiInterface.getNumProducts();
        for(int i = 0; i < size; ++i){
            String upc = rmiInterface.getUpcByID(i);
            comboUPC.addItem(upc);
        }
        
        // Load all payment types
        this.comboPaymentType.removeAllItems();
        String payments = rmiInterface.getPaymentTypes();
        StringTokenizer tokenizer;
        tokenizer = new StringTokenizer(payments,",");
        while(tokenizer.hasMoreTokens()){
            String payment = tokenizer.nextToken();
            comboPaymentType.addItem(payment);
        }
        
        clearInvoiceTable();
    }
    
    /**
     * Clear the invoice table
     */
    private void clearInvoiceTable() {
        
        DefaultTableModel model = (DefaultTableModel)tableInvoices.getModel(); 
        int rows = model.getRowCount(); 
        for(int i = rows - 1; i >=0; i--)
        {
           model.removeRow(i); 
        }
        totalAmount = 0;
        this.labelTotalAmount.setText("0.0");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        windowPanel = new javax.swing.JPanel();
        customerNameField = new javax.swing.JTextField();
        labelCustomerName = new javax.swing.JLabel();
        productPanel = new javax.swing.JPanel();
        labelUPC = new javax.swing.JLabel();
        comboUPC = new javax.swing.JComboBox();
        labelQuant = new javax.swing.JLabel();
        comboQuantity = new javax.swing.JComboBox();
        buttonEnter = new javax.swing.JButton();
        labelProductDesc = new javax.swing.JLabel();
        panelInvoice = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableInvoices = new javax.swing.JTable();
        labelTotal = new javax.swing.JLabel();
        labelTotalAmount = new javax.swing.JLabel();
        buttonClear = new javax.swing.JButton();
        labelDatetime = new javax.swing.JLabel();
        panelPayment = new javax.swing.JPanel();
        labelPaymentType = new javax.swing.JLabel();
        comboPaymentType = new javax.swing.JComboBox();
        labelAmount = new javax.swing.JLabel();
        textFiledAmount = new javax.swing.JTextField();
        buttonPay = new javax.swing.JButton();

        javax.swing.GroupLayout windowPanelLayout = new javax.swing.GroupLayout(windowPanel);
        windowPanel.setLayout(windowPanelLayout);
        windowPanelLayout.setHorizontalGroup(
            windowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        windowPanelLayout.setVerticalGroup(
            windowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("POST Terminal");

        labelCustomerName.setText("Customer Name");

        productPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Product"));

        labelUPC.setText("UPC");

        comboUPC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboUPCActionPerformed(evt);
            }
        });

        labelQuant.setText("Quantity");

        comboQuantity.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5" }));
        comboQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboQuantityActionPerformed(evt);
            }
        });

        buttonEnter.setText("ENTER");
        buttonEnter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEnterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout productPanelLayout = new javax.swing.GroupLayout(productPanel);
        productPanel.setLayout(productPanelLayout);
        productPanelLayout.setHorizontalGroup(
            productPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(productPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(productPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(productPanelLayout.createSequentialGroup()
                        .addComponent(labelProductDesc, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 10, Short.MAX_VALUE))
                    .addGroup(productPanelLayout.createSequentialGroup()
                        .addComponent(labelUPC)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboUPC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(labelQuant, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonEnter)))
                .addContainerGap())
        );
        productPanelLayout.setVerticalGroup(
            productPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(productPanelLayout.createSequentialGroup()
                .addGroup(productPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelUPC)
                    .addComponent(comboUPC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelQuant)
                    .addComponent(comboQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonEnter))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelProductDesc, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelInvoice.setBorder(javax.swing.BorderFactory.createTitledBorder("Invoice"));

        tableInvoices.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ITEM", "QTY", "UNIT PRICE", "EXTENDED PRICE"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableInvoices);

        labelTotal.setText("TOTAL");

        labelTotalAmount.setText("$0.00");

        buttonClear.setText("Clear");
        buttonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelInvoiceLayout = new javax.swing.GroupLayout(panelInvoice);
        panelInvoice.setLayout(panelInvoiceLayout);
        panelInvoiceLayout.setHorizontalGroup(
            panelInvoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelInvoiceLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonClear)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelTotal)
                .addGap(110, 110, 110)
                .addComponent(labelTotalAmount)
                .addContainerGap())
        );
        panelInvoiceLayout.setVerticalGroup(
            panelInvoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInvoiceLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelInvoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelTotal)
                    .addComponent(labelTotalAmount)
                    .addComponent(buttonClear))
                .addContainerGap())
        );

        labelDatetime.setText("Date and Time");

        panelPayment.setBorder(javax.swing.BorderFactory.createTitledBorder("Payment"));

        labelPaymentType.setText("Payment type");

        comboPaymentType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboPaymentType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboPaymentTypeActionPerformed(evt);
            }
        });

        labelAmount.setText("Amount");

        textFiledAmount.setText("0.00");
        textFiledAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFiledAmountActionPerformed(evt);
            }
        });

        buttonPay.setText("Pay");
        buttonPay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPayActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelPaymentLayout = new javax.swing.GroupLayout(panelPayment);
        panelPayment.setLayout(panelPaymentLayout);
        panelPaymentLayout.setHorizontalGroup(
            panelPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPaymentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelPaymentType)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboPaymentType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labelAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textFiledAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonPay, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );
        panelPaymentLayout.setVerticalGroup(
            panelPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPaymentLayout.createSequentialGroup()
                .addGroup(panelPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPaymentType, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboPaymentType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelAmount)
                    .addComponent(textFiledAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonPay))
                .addGap(0, 14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(labelCustomerName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(customerNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(productPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panelInvoice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(labelDatetime)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 139, Short.MAX_VALUE)
                        .addComponent(panelPayment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(customerNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelCustomerName)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(productPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelInvoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelPayment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(labelDatetime)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboQuantityActionPerformed

    private void buttonEnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEnterActionPerformed
        try {
            String upc = (String) comboUPC.getSelectedItem();
            String quantity =  (String) comboQuantity.getSelectedItem();
            
            float price = this.rmiInterface.getPriceByUpc(upc);
            float total = price * Float.parseFloat(quantity);
            
            DefaultTableModel model = (DefaultTableModel) tableInvoices.getModel();
            model.addRow(new Object[]{upc, quantity, Float.toString(price), Float.toString(total)});
            
            totalAmount += total;
            this.labelTotalAmount.setText("$"+Float.toString(totalAmount));
        } catch (RemoteException ex) {
            Logger.getLogger(ClientWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonEnterActionPerformed

    private void buttonPayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPayActionPerformed
        
        String customerName = customerNameField.getText();
        String payment = (String) comboPaymentType.getSelectedItem();
        String paymentParam = textFiledAmount.getText();
        if(customerName.equals("")){
            JOptionPane.showMessageDialog(null, "The customer name must not be empty.",
                        "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            // Get server's date time
            labelDatetime.setText(rmiInterface.getDateTime());
            
            // Pay all items
            String items = itemsSerialization();
            boolean addTransaction = rmiInterface.addTransaction(customerName, items, payment, paymentParam);
            
            if(!addTransaction){
                JOptionPane.showMessageDialog(null, "Invalid transaction.",
                        "ERROR", JOptionPane.ERROR_MESSAGE);
            }else{
                JOptionPane.showMessageDialog(null, "Paid successfully!",
                        "Payment", JOptionPane.INFORMATION_MESSAGE);
            }
            
        } catch (RemoteException ex) {
            Logger.getLogger(ClientWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonPayActionPerformed
    
    private String itemsSerialization() {
        
        String ret = "";
        DefaultTableModel model = (DefaultTableModel)tableInvoices.getModel(); 
        int rows = model.getRowCount(); 
        for(int i = rows - 1; i >=0; i--)
        {
           String upc = model.getValueAt(i, 0).toString();
           String quantity = model.getValueAt(i, 1).toString();
           ret += upc;
           ret += " ";
           ret += quantity;
           if(i != 0){
               ret += ",";
           }
        }
        
        return ret;
    }
    
    private void buttonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClearActionPerformed
        this.clearInvoiceTable();
    }//GEN-LAST:event_buttonClearActionPerformed

    private void comboPaymentTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboPaymentTypeActionPerformed
        String paymentType = (String) comboPaymentType.getSelectedItem();
        if("Credit card".equals(paymentType)){
            labelAmount.setText("Card#");
        }else{
            labelAmount.setText("Amount");
        }
    }//GEN-LAST:event_comboPaymentTypeActionPerformed

    private void textFiledAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFiledAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFiledAmountActionPerformed

    private void comboUPCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboUPCActionPerformed
        try {
            String upc = (String) comboUPC.getSelectedItem();
            String desc = this.rmiInterface.getDescriptionByUpc(upc).trim();
            desc += "\nPrice: $";
            desc += this.rmiInterface.getPriceByUpc(upc);
            this.labelProductDesc.setText(convertToMultiline(desc));
        } catch (RemoteException ex) {
            Logger.getLogger(ClientWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_comboUPCActionPerformed
    
    public String convertToMultiline(String orig)
    {
        return "<html>" + orig.replaceAll("\n", "<br>");
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonClear;
    private javax.swing.JButton buttonEnter;
    private javax.swing.JButton buttonPay;
    private javax.swing.JComboBox comboPaymentType;
    private javax.swing.JComboBox comboQuantity;
    private javax.swing.JComboBox comboUPC;
    private javax.swing.JTextField customerNameField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelAmount;
    private javax.swing.JLabel labelCustomerName;
    private javax.swing.JLabel labelDatetime;
    private javax.swing.JLabel labelPaymentType;
    private javax.swing.JLabel labelProductDesc;
    private javax.swing.JLabel labelQuant;
    private javax.swing.JLabel labelTotal;
    private javax.swing.JLabel labelTotalAmount;
    private javax.swing.JLabel labelUPC;
    private javax.swing.JPanel panelInvoice;
    private javax.swing.JPanel panelPayment;
    private javax.swing.JPanel productPanel;
    private javax.swing.JTable tableInvoices;
    private javax.swing.JTextField textFiledAmount;
    private javax.swing.JPanel windowPanel;
    // End of variables declaration//GEN-END:variables
}
